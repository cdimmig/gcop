#! /usr/bin/env python
# Create a cfg file for getting control parameters for dmoc optimal controller

PACKAGE = 'gcop_ctrl'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *
gen = ParameterGenerator()

#gen.add("iterate"     ,     bool_t     ,     0     ,     "Run one iteration of dmoc"  ,     False )
#gen.add("usemocap"     ,     bool_t     ,     0     ,     "To use mocap or not"  ,     False)

#       Name          		Type      level        Description   				      Default    Min   Max
gen.add("Nit"         , int_t    , 0 , "Number of iterations of dmoc"      , 10     , 0   , 30)
gen.add("tf"          , double_t , 0 , "Final Time"                        , 5      , 0   , 10)
gen.add("N"           , int_t    , 0 , "Number of segments"                , 64     , 0   , 100)
gen.add("final" , bool_t   , 0 , "Change final posn and joint"       , False)
gen.add("vel"   , bool_t   , 0 , "Use x0 y0 z0 for vel or position"  , False)
gen.add("x"           , double_t , 0 , "base xposn"                        , -1.0   , -10 , 10)
gen.add("y"           , double_t , 0 , "base yposn"                        , -1.0   , -10 , 10)
gen.add("z"           , double_t , 0 , "base zposn"                        , -1.0   , -10 , 10)
gen.add("vx"          , double_t , 0 , "base body xvel"                    , -1.0   , -10 , 10)
gen.add("vy"          , double_t , 0 , "base body yvel"                    , -1.0   , -10 , 10)
gen.add("vz"          , double_t , 0 , "base body zvel"                    , -1.0   , -10 , 10)
gen.add("r"           , double_t , 0 , "base roll"                         , 1.0    , -5  , 5)
gen.add("p"           , double_t , 0 , "base pitch"                        , 1.0    , -5  , 5)
gen.add("y"           , double_t , 0 , "base yaw"                          , 1.0    , -5  , 5)
gen.add("i_J"         , int_t    , 0 , "Joint index starting with 1"       , 1      , 1   , 10)
gen.add("Ji"          , double_t , 0 , "Jointangle"                        , 0      , 0   , 100)
gen.add("i_Q"         , int_t    , 0 , "StateCost_index starting with 1"   , 1      , 1   , 10)
gen.add("Qi"          , double_t , 0 , "Statecost"                         , 0      , 0   , 100)
gen.add("Qfi"         , double_t , 0 , "FinStatecost"                      , 50     , 0   , 100)
gen.add("i_R"         , int_t    , 0 , "ControlCost_index starting with 1" , 1      , 1   , 10)
gen.add("Ri"          , double_t , 0 , "Controlcost"                       , 1      , 0   , 10)
gen.add("mu"          , double_t , 0 , ""                                  , 0.01   , 0   , 100)

exit(gen.generate(PACKAGE, "Config", "MbsDMocInterface"))




